{"version":3,"sources":["../browserify/node_modules/browser-pack/_prelude.js","lib/index.js","lib/sanitize.js","lib/validate.js","lib/filter.js","../xp-emitter/index.js","../xp-emitter/lib/index.js","../xp-emitter/node_modules/eventemitter3/index.js"],"names":["global","filter","require","sanitize","validate","XP","XPEmitter","filterFn","item","has","mapFn","handle","assign","withdraw","types","freeze","keys","sanitizers","map","validators","module","exports","Class","extends","options","id","fields","strict","useful","initialize","self","this","call","promise","value","target","resolver","attempt","next","_ensure","enumerable","name","isObject","JSON","parse","toJSON","set","val","zipObject","type","isString","static","get","window","exp","forOwn","key","field","sanitizeStep","isVoid","step","isDefined","sanitizeValue","multi","index","method","includes","bool","toObject","toArray","validateStep","validateValue","err","isError","patterns","camelCase","camelCaseRegex","capitalize","capitalizeRegex","kebabCase","kebabCaseRegex","keyCase","keyCaseRegex","lowerCase","lowerCaseRegex","readable","readableRegex","snakeCase","snakeCaseRegex","startCase","startCaseRegex","trim","trimRegex","upperCase","upperCaseRegex","any","isAny","boolean","isBoolean","number","isFinite","object","recursive","string","input","xor","isArray","ValidationError","exclusiveMaximum","max","exclusiveMinimum","min","maximum","maxItems","attributes","length","maxLength","minimum","minItems","minLength","multipleOf","pattern","reg","isRegExp","toRegExp","test","InvalidError","required","isEmpty","RequiredError","isNull","ArgumentError","uniqueItems","isUniq","immutable","eventemitter3","EE","fn","context","once","EventEmitter","prototype","_events","undefined","listeners","event","i","l","ee","Array","emit","a1","a2","a3","a4","a5","args","len","arguments","removeListener","apply","j","on","listener","push","events","removeAllListeners","off","addListener","setMaxListeners","EventEmitter2","EventEmitter3"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var filter     = require('./filter'),\r\n        sanitize   = require('./sanitize'),\r\n        validate   = require('./validate'),\r\n        XP         = global.XP || require('expandjs'),\r\n        XPEmitter = global.XPEmitter || require('xp-emitter'),\r\n\r\n        filterFn   = function (item) { return XP.has(item, 'input') || XP.has(item, 'options'); },\r\n        mapFn      = function (item, handle) { item = XP.assign({handle: handle}, item); XP.withdraw(item, 'method'); return item; },\r\n\r\n        types      = XP.freeze(XP.keys(validate.types)),\r\n        sanitizers = XP.freeze(XP.filter(XP.map(sanitize.sanitizers, mapFn), filterFn)),\r\n        validators = XP.freeze(XP.filter(XP.map(validate.validators, mapFn), filterFn));\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * This class is used to provide scheming functionalities, including sanitization and validation.\r\n     *\r\n     * @class XPSchema\r\n     * @description This class is used to provide scheming functionalities, including sanitization and validation\r\n     * @extends XPEmitter\r\n     */\r\n    module.exports = new XP.Class('XPSchema', {\r\n\r\n        // EXTENDS\r\n        extends: XPEmitter,\r\n\r\n        // OPTIONS\r\n        options: {\r\n            id: '',\r\n            fields: null,\r\n            strict: false,\r\n            useful: false\r\n        },\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * @constructs\r\n         * @param {Object} options\r\n         *   @param {string} options.id\r\n         *   @param {Object} [options.fields]\r\n         *   @param {boolean} [options.strict = false]\r\n         *   @param {boolean} [options.useful = false]\r\n         */\r\n        initialize: function (options) {\r\n\r\n            // Vars\r\n            var self = this;\r\n\r\n            // Super\r\n            XPEmitter.call(self);\r\n\r\n            // Setting\r\n            self.options = options;\r\n            self.id      = self.options.id;\r\n            self.fields  = self.options.fields || {};\r\n            self.strict  = self.options.strict;\r\n            self.useful  = self.options.useful;\r\n        },\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * Filters the target\r\n         *\r\n         * @method filter\r\n         * @param {Object} target\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        filter: {\r\n            promise: true,\r\n            value: function (target, resolver) {\r\n                var self = this;\r\n                XP.attempt(function (next) { next(null, filter(self._ensure(target, 'target'), self.fields, self.options)); }, resolver);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sanitizes the target\r\n         *\r\n         * @method sanitize\r\n         * @param {Object} target\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        sanitize: {\r\n            promise: true,\r\n            value: function (target, resolver) {\r\n                var self = this;\r\n                XP.attempt(function (next) { next(null, sanitize(self._ensure(target, 'target'), self.fields, self.options)); }, resolver);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validates the target\r\n         *\r\n         * @method validate\r\n         * @param {Object} target\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        validate: {\r\n            promise: true,\r\n            value: function (target, resolver) {\r\n                var self = this;\r\n                XP.attempt(function (next) { next(null, validate(self._ensure(target, 'target'), self.fields, self.options)); }, resolver);\r\n            }\r\n        },\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * Used internally\r\n         *\r\n         * @method _ensure\r\n         * @param {*} target\r\n         * @param {string} [name]\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _ensure: {\r\n            enumerable: false,\r\n            value: function (target, name) {\r\n                var self = this;\r\n                switch (name) {\r\n                case 'target':\r\n                    return XP.isObject(target = JSON.parse(XP.toJSON(target, self.options.useful))) ? target : {};\r\n                default:\r\n                    return target;\r\n                }\r\n            }\r\n        },\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property fields\r\n         * @type Object\r\n         */\r\n        fields: {\r\n            set: function (val) { return XP.assign(val, XP.zipObject(this.id, {type: 'string'})); },\r\n            validate: function (val) { return XP.isObject(val); }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property id\r\n         * @type string\r\n         */\r\n        id: {\r\n            set: function (val) { return this.id || val; },\r\n            validate: function (val) { return XP.isString(val, true); }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property sanitizers\r\n         * @type Object\r\n         * @readonly\r\n         * @static\r\n         */\r\n        sanitizers: {\r\n            'static': true,\r\n            get: function () { return sanitizers; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property strict\r\n         * @type boolean\r\n         */\r\n        strict: {\r\n            set: function (val) { return !!val; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property types\r\n         * @type Array\r\n         * @readonly\r\n         * @static\r\n         */\r\n        types: {\r\n            'static': true,\r\n            get: function () { return types; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property useful\r\n         * @type boolean\r\n         */\r\n        useful: {\r\n            set: function (val) { return !!val; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property validators\r\n         * @type Object\r\n         * @readonly\r\n         * @static\r\n         */\r\n        validators: {\r\n            'static': true,\r\n            get: function () { return validators; }\r\n        }\r\n    });\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var exp = module.exports,\r\n        XP  = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Sanitize the target\r\n     *\r\n     * @param {Object} target\r\n     * @param {Object} fields\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {Object}\r\n     */\r\n    exp = module.exports = function (target, fields, options, name) {\r\n\r\n        // Checking\r\n        if (!XP.isObject(fields)) { return target; }\r\n\r\n        // Restricting\r\n        XP.forOwn(target, function (val, key) {\r\n            if (options.strict && !fields[key]) { delete target[key]; }\r\n        });\r\n\r\n        // Sanitizing\r\n        XP.forOwn(fields, function (field, key) {\r\n            target[key] = exp.sanitizeStep(target[key], field, fields, options, (name ? name + '.' : '') + key);\r\n            if (options.useful && XP.isVoid(target[key])) { delete target[key]; }\r\n        });\r\n\r\n        return target;\r\n    };\r\n\r\n    /**\r\n     * Sanitizes the step\r\n     *\r\n     * @param {*} step\r\n     * @param {Object} [field]\r\n     * @param {Object} [fields]\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.sanitizeStep = function (step, field, fields, options, name) {\r\n\r\n        // Setting\r\n        step = XP.isDefined(step) ? step : null;\r\n\r\n        // Checking\r\n        if (!XP.isObject(field)) { return step; }\r\n\r\n        // Sanitizing (step)\r\n        step = exp.sanitizeValue(step, field, null, name);\r\n\r\n        // Sanitizing (values)\r\n        if (field.map || field.multi) {\r\n            XP[field.map ? 'forOwn' : 'forEach'](step, function (value, index) {\r\n                step[index] = exp.sanitizeValue(value, field, index, name + '[' + index + ']');\r\n                if (XP.isObject(step[index]) && (field.fields || field.type === 'recursive')) {\r\n                    step[index] = exp(step[index], field.fields || fields, XP.assign({}, options, {strict: field.strict}), name + '[' + index + ']');\r\n                }\r\n            });\r\n        } else if (XP.isObject(step) && (field.fields || field.type === 'recursive')) {\r\n            step = exp(step, field.fields || fields, XP.assign({}, options, {strict: field.strict}), name);\r\n        }\r\n\r\n        return step;\r\n    };\r\n\r\n    /**\r\n     * Sanitizes the value\r\n     *\r\n     * @param {*} value\r\n     * @param {Object} [field]\r\n     * @param {number | string} [index]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.sanitizeValue = function (value, field, index, name) {\r\n\r\n        // Setting\r\n        value = XP.isDefined(value) ? value : null;\r\n\r\n        // Checking\r\n        if (!XP.isObject(field)) { return value; }\r\n\r\n        // Sanitizing (type)\r\n        if (field.map && XP.isVoid(index)) {\r\n            value = exp.sanitizers.map.method(value, field.map, name);\r\n        } else if (field.multi && XP.isVoid(index)) {\r\n            value = exp.sanitizers.multi.method(value, field.multi, name);\r\n        } else {\r\n            value = exp.sanitizers.type.method(value, field.type, name);\r\n        }\r\n\r\n        // Sanitizing (other)\r\n        XP.forOwn(field, function (val, key) {\r\n            if (exp.sanitizers[key] && !XP.includes(['map', 'multi', 'type'], key)) {\r\n                value = exp.sanitizers[key].method(value, field[key], name);\r\n            }\r\n        });\r\n\r\n        return value;\r\n    };\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * TODO DOC\r\n     *\r\n     * @property sanitizers\r\n     * @type Object\r\n     */\r\n    exp.sanitizers = {\r\n\r\n        /**\r\n         * Returns map representation of target (based on bool)\r\n         *\r\n         * @param {*} target\r\n         * @param {boolean} bool\r\n         * @returns {*}\r\n         */\r\n        map: {method: function (target, bool) {\r\n            return (bool && XP.toObject(target, true)) || target;\r\n        }},\r\n\r\n        /**\r\n         * Returns array representation of target (based on bool)\r\n         *\r\n         * @param {*} target\r\n         * @param {boolean} bool\r\n         * @returns {*}\r\n         */\r\n        multi: {method: function (target, bool) {\r\n            return (bool && XP.toArray(target, true)) || target;\r\n        }},\r\n\r\n        /**\r\n         * Returns typed representation of target\r\n         *\r\n         * @param {*} target\r\n         * @param {string} type\r\n         * @returns {*}\r\n         */\r\n        type: {method: function (target, type) {\r\n            return type === 'boolean' ? !!target : target;\r\n        }}\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var exp = module.exports,\r\n        XP  = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Validates the target\r\n     *\r\n     * @param {Object} target\r\n     * @param {Object} fields\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {Object}\r\n     */\r\n    exp = module.exports = function (target, fields, options, name) {\r\n\r\n        // Checking\r\n        if (!XP.isObject(fields)) { return target; }\r\n\r\n        // Validating\r\n        XP.forOwn(fields, function (field, key) {\r\n            exp.validateStep(target[key], field, fields, options, (name ? name + '.' : '') + key);\r\n        });\r\n\r\n        return target;\r\n    };\r\n\r\n    /**\r\n     * Validates the step\r\n     *\r\n     * @param {*} step\r\n     * @param {Object} [field]\r\n     * @param {Object} [fields]\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.validateStep = function (step, field, fields, options, name) {\r\n\r\n        // Setting\r\n        step = XP.isDefined(step) ? step : null;\r\n\r\n        // Checking\r\n        if (!XP.isObject(field)) { return step; }\r\n\r\n        // Validating (step)\r\n        exp.validateValue(step, field, null, name);\r\n\r\n        // Validating (values)\r\n        if (field.map || field.multi) {\r\n            XP[field.map ? 'forOwn' : 'forEach'](step, function (value, index) {\r\n                exp.validateValue(value, field, index, name + '[' + index + ']');\r\n                if (XP.isObject(value) && (field.fields || field.type === 'recursive')) {\r\n                    exp(value, field.fields || fields, XP.assign({}, options, {strict: field.strict}), name + '[' + index + ']');\r\n                }\r\n            });\r\n        } else if (XP.isObject(step) && (field.fields || field.type === 'recursive')) {\r\n            exp(step, field.fields || fields, XP.assign({}, options, {strict: field.strict}), name);\r\n        }\r\n\r\n        return step;\r\n    };\r\n\r\n    /**\r\n     * Validates the value\r\n     *\r\n     * @param {*} value\r\n     * @param {Object} [field]\r\n     * @param {number | string} [index]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.validateValue = function (value, field, index, name) {\r\n\r\n        // Vars\r\n        var err;\r\n\r\n        // Setting\r\n        value = XP.isDefined(value) ? value : null;\r\n\r\n        // Checking\r\n        if (!XP.isObject(field)) { return value; }\r\n\r\n        // Validating (type)\r\n        if (field.map && XP.isVoid(index)) {\r\n            if (XP.isError(err = exp.validators.map.method(value, field.map, name))) { throw err; }\r\n        } else if (field.multi && XP.isVoid(index)) {\r\n            if (XP.isError(err = exp.validators.multi.method(value, field.multi, name))) { throw err; }\r\n        } else {\r\n            if (XP.isError(err = exp.validators.type.method(value, field.type, name))) { throw err; }\r\n        }\r\n\r\n        // Validating (other)\r\n        XP.forOwn(field, function (val, key) {\r\n            if (exp.validators[key] && !XP.includes(['map', 'multi', 'type'], key)) {\r\n                if (XP.isError(err = exp.validators[key].method(value, field[key], name))) { throw err; }\r\n            }\r\n        });\r\n\r\n        return value;\r\n    };\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * TODO DOC\r\n     *\r\n     * @property patterns\r\n     * @type Object\r\n     */\r\n    exp.patterns = {\r\n        camelCase: XP.camelCaseRegex,\r\n        capitalize: XP.capitalizeRegex,\r\n        kebabCase: XP.kebabCaseRegex,\r\n        keyCase: XP.keyCaseRegex,\r\n        lowerCase: XP.lowerCaseRegex,\r\n        readable: XP.readableRegex,\r\n        snakeCase: XP.snakeCaseRegex,\r\n        startCase: XP.startCaseRegex,\r\n        trim: XP.trimRegex,\r\n        upperCase: XP.upperCaseRegex\r\n    };\r\n\r\n    /**\r\n     * TODO DOC\r\n     *\r\n     * @property types\r\n     * @type Object\r\n     */\r\n    exp.types = {\r\n        any: XP.isAny,\r\n        boolean: XP.isBoolean,\r\n        number: XP.isFinite,\r\n        object: XP.isObject,\r\n        recursive: XP.isObject,\r\n        string: XP.isString\r\n    };\r\n\r\n    /**\r\n     * TODO DOC\r\n     *\r\n     * @property validators\r\n     * @type Object\r\n     */\r\n    exp.validators = {\r\n\r\n        /**\r\n         * Returns error if target is not array (based on bool)\r\n         *\r\n         * @param {*} target\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        multi: {input: 'checkbox', method: function (target, bool, name) {\r\n            return XP.xor(bool, XP.isArray(target)) ? new XP.ValidationError(name || 'target', 'should be a multi') : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is not an map (based on bool)\r\n         *\r\n         * @param {*} target\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        map: {input: 'checkbox', multi: true, method: function (target, bool, name) {\r\n            return XP.xor(bool, XP.isObject(target)) ? new XP.ValidationError(name || 'target', 'should be an map') : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is gte than max\r\n         *\r\n         * @param {number} target\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        exclusiveMaximum: {input: 'number', type: 'number', method: function (target, max, name) {\r\n            return !XP.isFinite(target) || !XP.isFinite(max) ? false : (target >= max ? new XP.ValidationError(name || 'target', 'should be less than ' + max) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is lte than min\r\n         *\r\n         * @param {number} target\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        exclusiveMinimum: {input: 'number', type: 'number', method: function (target, min, name) {\r\n            return !XP.isFinite(target) || !XP.isFinite(min) ? false : (target <= min ? new XP.ValidationError(name || 'target', 'should be greater than ' + min) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is gt than max\r\n         *\r\n         * @param {number} target\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maximum: {input: 'number', type: 'number', method: function (target, max, name) {\r\n            return !XP.isFinite(target) || !XP.isFinite(max) ? false : (target > max ? new XP.ValidationError(name || 'target', 'should be a maximum of ' + max) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target length is gt than max\r\n         *\r\n         * @param {Array} target\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maxItems: {attributes: {min: 1}, input: 'number', multi: true, method: function (target, max, name) {\r\n            return !XP.isArray(target) || !XP.isFinite(max) || max < 1 ? false : (target.length > max ? new XP.ValidationError(name || 'target', 'should be a maximum of ' + max + ' items') : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target length is gt than max\r\n         *\r\n         * @param {string} target\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maxLength: {attributes: {min: 1}, input: 'number', type: 'string', method: function (target, max, name) {\r\n            return !XP.isString(target) || !XP.isFinite(max) || max < 1 ? false : (target.length > max ? new XP.ValidationError(name || 'target', 'should be a maximum of ' + max + ' chars') : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is lt than min\r\n         *\r\n         * @param {number} target\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        minimum: {input: 'number', type: 'number', method: function (target, min, name) {\r\n            return !XP.isFinite(target) || !XP.isFinite(min) ? false : (target < min ? new XP.ValidationError(name || 'target', 'should be a minimum of ' + min) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target length is lt than min\r\n         *\r\n         * @param {Array} target\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        minItems: {attributes: {min: 1}, input: 'number', multi: true, method: function (target, min, name) {\r\n            return !XP.isArray(target) || !XP.isFinite(min) ? false : (target.length < min ? new XP.ValidationError(name || 'target', 'should be a minimum of ' + min + ' items') : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target length is lt than min\r\n         *\r\n         * @param {string} target\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        minLength: {attributes: {min: 1}, input: 'number', type: 'string', method: function (target, min, name) {\r\n            return !XP.isString(target) || !XP.isFinite(min) ? false : (target.length < min ? new XP.ValidationError(name || 'target', 'should be a minimum of ' + min + ' chars') : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is not multiple of val\r\n         *\r\n         * @param {number} target\r\n         * @param {number} val\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        multipleOf: {input: 'number', type: 'number', method: function (target, val, name) {\r\n            return !XP.isFinite(target) || !XP.isFinite(val) ? false : (target % val !== 0 ? new XP.ValidationError(name || 'target', 'should be divisible by ' + val) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target matches pattern\r\n         *\r\n         * @param {string} target\r\n         * @param {string} pattern\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        pattern: {input: 'text', options: XP.keys(exp.patterns), type: 'string', method: function (target, pattern, name) {\r\n            var reg = XP.isString(target) && XP.isString(pattern, true) && (exp.patterns[pattern] || pattern);\r\n            if (XP.isString(reg) && XP.isRegExp(reg = XP.toRegExp(pattern))) { exp.patterns[pattern] = reg; }\r\n            return !reg ? false : (!reg.test(target) ? new XP.InvalidError(name || 'target') : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is empty (based on bool)\r\n         *\r\n         * @param {*} target\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        required: {input: 'checkbox', method: function (target, bool, name) {\r\n            return bool && XP.isEmpty(target) ? new XP.RequiredError(name || 'target') : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target type is not correct\r\n         *\r\n         * @param {*} target\r\n         * @param {string} type\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        type: {attributes: {required: true}, options: XP.keys(exp.types), method: function (target, type, name) {\r\n            return XP.has(exp.types, type || 'any') && !exp.types[type || 'any'](target) && !XP.isNull(target) ? new XP.ArgumentError(name, type || 'any') : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target includes duplicates (based on bool)\r\n         *\r\n         * @param {Array} target\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        uniqueItems: {input: 'checkbox', multi: true, method: function (target, bool, name) {\r\n            return !XP.isArray(target) ? false : (bool && !XP.isUniq(target) ? new XP.ValidationError(name || 'target', 'should not have duplicates') : null);\r\n        }}\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var XP = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Filters the target\r\n     *\r\n     * @param {Object} target\r\n     * @param {Object} fields\r\n     * @returns {Object}\r\n     */\r\n    module.exports = function (target, fields) {\r\n\r\n        // Checking\r\n        if (!XP.isObject(fields)) { return target; }\r\n\r\n        // Filtering\r\n        XP.forOwn(target, function (val, key) {\r\n            if (XP.has(fields, key) && fields[key].immutable) { delete target[key]; }\r\n        });\r\n\r\n        return target;\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\nmodule.exports = require('./lib');","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var eventemitter3 = require('eventemitter3'),\r\n        XP            = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * This class is used to provide event emitting functionalities.\r\n     *\r\n     * @class XPEmitter\r\n     * @description This class is used to provide event emitting functionalities\r\n     */\r\n    module.exports = new XP.Class('XPEmitter', {\r\n\r\n        // EXTENDS\r\n        extends: eventemitter3\r\n    });\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","'use strict';\n\n/**\n * Representation of a single EventEmitter function.\n *\n * @param {Function} fn Event handler to be called.\n * @param {Mixed} context Context for function execution.\n * @param {Boolean} once Only emit once\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal EventEmitter interface that is molded against the Node.js\n * EventEmitter interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() { /* Nothing to set */ }\n\n/**\n * Holds the assigned EventEmitters by name.\n *\n * @type {Object}\n * @private\n */\nEventEmitter.prototype._events = undefined;\n\n/**\n * Return a list of assigned event listeners.\n *\n * @param {String} event The events that should be listed.\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  if (!this._events || !this._events[event]) return [];\n  if (this._events[event].fn) return [this._events[event].fn];\n\n  for (var i = 0, l = this._events[event].length, ee = new Array(l); i < l; i++) {\n    ee[i] = this._events[event][i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Emit an event to all registered event listeners.\n *\n * @param {String} event The name of the event.\n * @returns {Boolean} Indication if we've emitted an event.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  if (!this._events || !this._events[event]) return false;\n\n  var listeners = this._events[event]\n    , len = arguments.length\n    , args\n    , i;\n\n  if ('function' === typeof listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Functon} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this);\n\n  if (!this._events) this._events = {};\n  if (!this._events[event]) this._events[event] = listener;\n  else {\n    if (!this._events[event].fn) this._events[event].push(listener);\n    else this._events[event] = [\n      this._events[event], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true);\n\n  if (!this._events) this._events = {};\n  if (!this._events[event]) this._events[event] = listener;\n  else {\n    if (!this._events[event].fn) this._events[event].push(listener);\n    else this._events[event] = [\n      this._events[event], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Remove event listeners.\n *\n * @param {String} event The event we want to remove.\n * @param {Function} fn The listener that we need to find.\n * @param {Boolean} once Only remove once listeners.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, once) {\n  if (!this._events || !this._events[event]) return this;\n\n  var listeners = this._events[event]\n    , events = [];\n\n  if (fn) {\n    if (listeners.fn && (listeners.fn !== fn || (once && !listeners.once))) {\n      events.push(listeners);\n    }\n    if (!listeners.fn) for (var i = 0, length = listeners.length; i < length; i++) {\n      if (listeners[i].fn !== fn || (once && !listeners[i].once)) {\n        events.push(listeners[i]);\n      }\n    }\n  }\n\n  //\n  // Reset the array, or remove it completely if we have no more listeners.\n  //\n  if (events.length) {\n    this._events[event] = events.length === 1 ? events[0] : events;\n  } else {\n    delete this._events[event];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners or only the listeners for the specified event.\n *\n * @param {String} event The event want to remove all listeners for.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  if (!this._events) return this;\n\n  if (event) delete this._events[event];\n  else this._events = {};\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the module.\n//\nEventEmitter.EventEmitter = EventEmitter;\nEventEmitter.EventEmitter2 = EventEmitter;\nEventEmitter.EventEmitter3 = EventEmitter;\n\n//\n// Expose the module.\n//\nmodule.exports = EventEmitter;\n"]}