{"version":3,"sources":["../browserify/node_modules/browser-pack/_prelude.js","index","lib/index.js","lib/filter.js","lib/prepare.js","lib/sanitize.js","lib/validate.js"],"names":["global","XP","require","XPEmitter","filter","prepare","sanitize","validate","filterer","item","has","mapper","handle","assign","withdraw","types","freeze","keys","sanitizers","map","validators","module","exports","XPSchema","Class","extends","initialize","options","self","this","call","fields","loose","useful","promise","value","data","resolver","waterfall","next","_assert","attempt","val","isObject","set","static","get","_assertData","enumerable","ValidationError","window","forOwn","key","immutable","field","isDefined","isVoid","exp","name","sanitizeStep","step","sanitizeValue","multi","index","type","method","sub","bool","validateStep","validateValue","strict","err","patterns","camelCase","camelCaseRegex","capitalize","capitalizeRegex","kebabCase","kebabCaseRegex","keyCase","keyCaseRegex","lowerCase","lowerCaseRegex","snakeCase","snakeCaseRegex","startCase","startCaseRegex","trim","trimRegex","upperCase","upperCaseRegex","uuid","uuidRegex","any","isAny","boolean","isBoolean","input","isInput","number","isFinite","object","recursive","string","isString","exclusiveMaximum","max","exclusiveMinimum","min","xor","maximum","maxItems","attributes","isArray","length","maxLength","minimum","minItems","minLength","multipleOf","pattern","reg","isRegExp","toRegExp","test","InvalidError","required","isEmpty","RequiredError","isNull","uniqueItems","isUniq"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports=require(\"./lib\");","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var XP         = global.XP || require('expandjs'),\r\n        XPEmitter  = global.XPEmitter || require('xp-emitter'),\r\n\r\n        filter     = require('./filter'),\r\n        prepare    = require('./prepare'),\r\n        sanitize   = require('./sanitize'),\r\n        validate   = require('./validate'),\r\n\r\n        filterer   = function (item) { return XP.has(item, 'input') || XP.has(item, 'options'); },\r\n        mapper     = function (item, handle) { item = XP.assign({handle: handle}, item); XP.withdraw(item, 'method'); return item; },\r\n\r\n        types      = XP.freeze(XP.keys(validate.types)),\r\n        sanitizers = XP.freeze(XP.filter(XP.map(sanitize.sanitizers, mapper), filterer)),\r\n        validators = XP.freeze(XP.filter(XP.map(validate.validators, mapper), filterer));\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * This class is used to provide scheming functionalities, including sanitization and validation.\r\n     *\r\n     * @class XPSchema\r\n     * @description This class is used to provide scheming functionalities, including sanitization and validation\r\n     * @extends XPEmitter\r\n     */\r\n    module.exports = global.XPSchema = new XP.Class('XPSchema', {\r\n\r\n        // EXTENDS\r\n        extends: XPEmitter,\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * @constructs\r\n         * @param {Object} options\r\n         *   @param {Object} [options.fields]\r\n         *   @param {boolean} [options.loose = false]\r\n         *   @param {boolean} [options.useful = false]\r\n         */\r\n        initialize: function (options) {\r\n\r\n            // Vars\r\n            var self = this;\r\n\r\n            // Super\r\n            XPEmitter.call(self);\r\n\r\n            // Setting\r\n            self.options = options;\r\n            self.fields  = self.options.fields || {};\r\n            self.loose   = self.options.loose || false;\r\n            self.useful  = self.options.useful || false;\r\n        },\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * Filters the data.\r\n         *\r\n         * @method filter\r\n         * @param {Object} data\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        filter: {\r\n            promise: true,\r\n            value: function (data, resolver) {\r\n                var self = this;\r\n                XP.waterfall([\r\n                    function (next) { self._assert({data: data}, next); }, // asserting\r\n                    function (next) { XP.attempt(function (next) { next(null, filter(data, self.fields)); }, next); } // filtering\r\n                ], resolver);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prepares the data.\r\n         *\r\n         * @method filter\r\n         * @param {Object} data\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        prepare: {\r\n            promise: true,\r\n            value: function (data, resolver) {\r\n                var self = this;\r\n                XP.waterfall([\r\n                    function (next) { self._assert({data: data}, next); }, // asserting\r\n                    function (next) { XP.attempt(function (next) { next(null, prepare(data, self.fields)); }, next); } // preparing\r\n                ], resolver);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sanitizes the data.\r\n         *\r\n         * @method sanitize\r\n         * @param {Object} data\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        sanitize: {\r\n            promise: true,\r\n            value: function (data, resolver) {\r\n                var self = this;\r\n                XP.waterfall([\r\n                    function (next) { self._assert({data: data}, next); }, // asserting\r\n                    function (next) { XP.attempt(function (next) { next(null, sanitize(data, self.fields, self.options)); }, next); } // sanitizing\r\n                ], resolver);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validates the data.\r\n         *\r\n         * @method validate\r\n         * @param {Object} data\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        validate: {\r\n            promise: true,\r\n            value: function (data, resolver) {\r\n                var self = this;\r\n                XP.waterfall([\r\n                    function (next) { self._assert({data: data}, next); }, // asserting\r\n                    function (next) { XP.attempt(function (next) { next(null, validate(data, self.fields, self.options)); }, next); } // validating\r\n                ], resolver);\r\n            }\r\n        },\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property fields\r\n         * @type Object\r\n         */\r\n        fields: {\r\n            validate: function (val) { return !XP.isObject(val) && 'Object'; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property loose\r\n         * @type boolean\r\n         */\r\n        loose: {\r\n            set: function (val) { return !!val; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property sanitizers\r\n         * @type Object\r\n         * @readonly\r\n         * @static\r\n         */\r\n        sanitizers: {\r\n            'static': true,\r\n            get: function () { return sanitizers; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property types\r\n         * @type Array\r\n         * @readonly\r\n         * @static\r\n         */\r\n        types: {\r\n            'static': true,\r\n            get: function () { return types; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property useful\r\n         * @type boolean\r\n         */\r\n        useful: {\r\n            set: function (val) { return !!val; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property validators\r\n         * @type Object\r\n         * @readonly\r\n         * @static\r\n         */\r\n        validators: {\r\n            'static': true,\r\n            get: function () { return validators; }\r\n        },\r\n\r\n        /*********************************************************************/\r\n\r\n        // ASSERTS\r\n        _assertData: {enumerable: false, value: function (val) { return !XP.isObject(val) && new XP.ValidationError('data', 'Object', 400); }}\r\n    });\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var XP = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Filters the data\r\n     *\r\n     * @param {Object} data\r\n     * @param {Object} fields\r\n     * @returns {Object}\r\n     */\r\n    module.exports = function (data, fields) {\r\n\r\n        // Filtering\r\n        XP.forOwn(data, function (val, key) {\r\n            if (fields[key] && fields[key].immutable) { delete data[key]; }\r\n        });\r\n\r\n        return data;\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var XP = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Filters the data\r\n     *\r\n     * @param {Object} data\r\n     * @param {Object} fields\r\n     * @returns {Object}\r\n     */\r\n    module.exports = function (data, fields) {\r\n\r\n        // Filtering\r\n        XP.forOwn(fields, function (field, key) {\r\n            if (XP.isDefined(fields.value) && XP.isVoid(data[key])) { data[key] = field.value; }\r\n        });\r\n\r\n        return data;\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var exp = module.exports,\r\n        XP  = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Sanitize the data\r\n     *\r\n     * @param {Object} data\r\n     * @param {Object} fields\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {Object}\r\n     */\r\n    exp = module.exports = function (data, fields, options, name) {\r\n\r\n        // Restricting\r\n        XP.forOwn(data, function (val, key) {\r\n            if (!options.loose && !fields[key]) { delete data[key]; }\r\n        });\r\n\r\n        // Sanitizing\r\n        XP.forOwn(fields, function (field, key) {\r\n            data[key] = exp.sanitizeStep(data[key], field, fields, options, (name ? name + '.' : '') + key);\r\n            if (options.useful && XP.isVoid(data[key])) { delete data[key]; }\r\n        });\r\n\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * Sanitizes the step\r\n     *\r\n     * @param {*} step\r\n     * @param {Object} [field]\r\n     * @param {Object} [fields]\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.sanitizeStep = function (step, field, fields, options, name) {\r\n\r\n        // Setting\r\n        step = XP.isDefined(step) ? step : null;\r\n\r\n        // Checking\r\n        if (!XP.isObject(field)) { return step; }\r\n\r\n        // Sanitizing (step)\r\n        step = exp.sanitizeValue(step, field, null, name);\r\n\r\n        // Sanitizing (values)\r\n        if (field.map || field.multi) {\r\n            XP[field.map ? 'forOwn' : 'forEach'](step, function (value, index) {\r\n                step[index] = exp.sanitizeValue(value, field, index, name + '[' + index + ']');\r\n                if (XP.isObject(step[index]) && (field.fields || field.type === 'recursive')) {\r\n                    step[index] = exp(step[index], field.fields || fields, XP.assign({}, options, {loose: field.loose}), name + '[' + index + ']');\r\n                }\r\n            });\r\n        } else if (XP.isObject(step) && (field.fields || field.type === 'recursive')) {\r\n            step = exp(step, field.fields || fields, XP.assign({}, options, {loose: field.loose}), name);\r\n        }\r\n\r\n        return step;\r\n    };\r\n\r\n    /**\r\n     * Sanitizes the value\r\n     *\r\n     * @param {*} value\r\n     * @param {Object} [field]\r\n     * @param {number | string} [index]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.sanitizeValue = function (value, field, index, name) {\r\n\r\n        // Setting\r\n        value = XP.isDefined(value) ? value : null;\r\n\r\n        // Vars\r\n        var key = (XP.isVoid(index) && ((field.map && 'map') || (field.multi && 'multi'))) || 'type',\r\n            val = exp.sanitizers[key].method(value, field[key], name);\r\n\r\n        // Sanitizing\r\n        XP.forOwn(field, function (sub, key) {\r\n            if (!exp.sanitizers[key] || key === 'map' || key === 'multi' || key === 'type') { return; }\r\n            val = exp.sanitizers[key].method(val, sub, name);\r\n        });\r\n\r\n        return val;\r\n    };\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * The available sanitizers.\r\n     *\r\n     * @property sanitizers\r\n     * @type Object\r\n     */\r\n    exp.sanitizers = {\r\n\r\n        /**\r\n         * Returns map representation of value (based on bool)\r\n         *\r\n         * @param {*} value\r\n         * @param {boolean} bool\r\n         * @returns {*}\r\n         */\r\n        map: {method: function (value, bool) {\r\n            return XP.isVoid(value) && bool ? {} : value;\r\n        }},\r\n\r\n        /**\r\n         * Returns array representation of value (based on bool)\r\n         *\r\n         * @param {*} value\r\n         * @param {boolean} bool\r\n         * @returns {*}\r\n         */\r\n        multi: {method: function (value, bool) {\r\n            return XP.isVoid(value) && bool ? [] : value;\r\n        }},\r\n\r\n        /**\r\n         * Returns typed representation of value\r\n         *\r\n         * @param {*} value\r\n         * @param {string} type\r\n         * @returns {*}\r\n         */\r\n        type: {method: function (value, type) {\r\n            return XP.isVoid(value) && type === 'boolean' ? false : value;\r\n        }}\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var exp = module.exports,\r\n        XP  = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Validates the data.\r\n     *\r\n     * @param {Object} data\r\n     * @param {Object} fields\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {Object}\r\n     */\r\n    exp = module.exports = function (data, fields, options, name) {\r\n\r\n        // Validating\r\n        XP.forOwn(fields, function (field, key) {\r\n            exp.validateStep(data[key], field, fields, options, (name ? name + '.' : '') + key);\r\n        });\r\n\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * Validates the step.\r\n     *\r\n     * @param {*} step\r\n     * @param {Object} [field]\r\n     * @param {Object} [fields]\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.validateStep = function (step, field, fields, options, name) {\r\n\r\n        // Setting\r\n        step = XP.isDefined(step) ? step : null;\r\n\r\n        // Checking\r\n        if (!XP.isObject(field)) { return step; }\r\n\r\n        // Validating (step)\r\n        exp.validateValue(step, field, null, name);\r\n\r\n        // Validating (values)\r\n        if (field.map || field.multi) {\r\n            XP[field.map ? 'forOwn' : 'forEach'](step, function (value, index) {\r\n                exp.validateValue(value, field, index, name + '[' + index + ']');\r\n                if (XP.isObject(value) && (field.fields || field.type === 'recursive')) {\r\n                    exp(value, field.fields || fields, XP.assign({}, options, {strict: field.strict}), name + '[' + index + ']');\r\n                }\r\n            });\r\n        } else if (XP.isObject(step) && (field.fields || field.type === 'recursive')) {\r\n            exp(step, field.fields || fields, XP.assign({}, options, {strict: field.strict}), name);\r\n        }\r\n\r\n        return step;\r\n    };\r\n\r\n    /**\r\n     * Validates the value.\r\n     *\r\n     * @param {*} value\r\n     * @param {Object} [field]\r\n     * @param {number | string} [index]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.validateValue = function (value, field, index, name) {\r\n\r\n        // Setting\r\n        value = XP.isDefined(value) ? value : null;\r\n\r\n        // Vars\r\n        var key = (XP.isVoid(index) && ((field.map && 'map') || (field.multi && 'multi'))) || 'type',\r\n            err = exp.validators[key].method(value, field[key], name);\r\n\r\n        // Throwing\r\n        if (err) { throw err; }\r\n\r\n        // Validating\r\n        XP.forOwn(field, function (sub, key) {\r\n            if (!exp.validators[key] || key === 'map' || key === 'multi' || key === 'type') { return; }\r\n            if (err = exp.validators[key].method(value, sub, name)) { throw err; }\r\n        });\r\n\r\n        return value;\r\n    };\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * The available patterns.\r\n     *\r\n     * @property patterns\r\n     * @type Object\r\n     */\r\n    exp.patterns = {\r\n        camelCase: XP.camelCaseRegex,\r\n        capitalize: XP.capitalizeRegex,\r\n        kebabCase: XP.kebabCaseRegex,\r\n        keyCase: XP.keyCaseRegex,\r\n        lowerCase: XP.lowerCaseRegex,\r\n        snakeCase: XP.snakeCaseRegex,\r\n        startCase: XP.startCaseRegex,\r\n        trim: XP.trimRegex,\r\n        upperCase: XP.upperCaseRegex,\r\n        uuid: XP.uuidRegex\r\n    };\r\n\r\n    /**\r\n     * The available types.\r\n     *\r\n     * @property types\r\n     * @type Object\r\n     */\r\n    exp.types = {\r\n        any: XP.isAny,\r\n        boolean: XP.isBoolean,\r\n        input: XP.isInput,\r\n        number: XP.isFinite,\r\n        object: XP.isObject,\r\n        recursive: XP.isObject,\r\n        string: XP.isString\r\n    };\r\n\r\n    /**\r\n     * The available validators.\r\n     *\r\n     * @property validators\r\n     * @type Object\r\n     */\r\n    exp.validators = {\r\n\r\n        /**\r\n         * Returns error if value is gte than max\r\n         *\r\n         * @param {number} value\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        exclusiveMaximum: {input: 'number', type: 'number', method: function (value, max, name) {\r\n            return !XP.isFinite(value) || !XP.isFinite(max) ? false : (value >= max ? new XP.ValidationError(name || 'data', 'less than ' + max, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is lte than min\r\n         *\r\n         * @param {number} value\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        exclusiveMinimum: {input: 'number', type: 'number', method: function (value, min, name) {\r\n            return !XP.isFinite(value) || !XP.isFinite(min) ? false : (value <= min ? new XP.ValidationError(name || 'data', 'greater than ' + min, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is not an map (based on bool)\r\n         *\r\n         * @param {*} value\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        map: {input: 'checkbox', multi: true, method: function (value, bool, name) {\r\n            return XP.xor(bool, XP.isObject(value)) ? new XP.ValidationError(name || 'data', 'a map', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is gt than max\r\n         *\r\n         * @param {number} value\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maximum: {input: 'number', type: 'number', method: function (value, max, name) {\r\n            return !XP.isFinite(value) || !XP.isFinite(max) ? false : (value > max ? new XP.ValidationError(name || 'data', 'a maximum of ' + max, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value length is gt than max\r\n         *\r\n         * @param {Array} value\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maxItems: {attributes: {min: 1}, input: 'number', multi: true, method: function (value, max, name) {\r\n            return !XP.isArray(value) || !XP.isFinite(max) || max < 1 ? false : (value.length > max ? new XP.ValidationError(name || 'data', 'a maximum of ' + max + ' items', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value length is gt than max\r\n         *\r\n         * @param {string} value\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maxLength: {attributes: {min: 1}, input: 'number', type: 'string', method: function (value, max, name) {\r\n            return !XP.isString(value) || !XP.isFinite(max) || max < 1 ? false : (value.length > max ? new XP.ValidationError(name || 'data', 'a maximum of ' + max + ' chars', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is lt than min\r\n         *\r\n         * @param {number} value\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        minimum: {input: 'number', type: 'number', method: function (value, min, name) {\r\n            return !XP.isFinite(value) || !XP.isFinite(min) ? false : (value < min ? new XP.ValidationError(name || 'data', 'a minimum of ' + min, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value length is lt than min\r\n         *\r\n         * @param {Array} value\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        minItems: {attributes: {min: 1}, input: 'number', multi: true, method: function (value, min, name) {\r\n            return !XP.isArray(value) || !XP.isFinite(min) ? false : (value.length < min ? new XP.ValidationError(name || 'data', 'a minimum of ' + min + ' items', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value length is lt than min\r\n         *\r\n         * @param {string} value\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        minLength: {attributes: {min: 1}, input: 'number', type: 'string', method: function (value, min, name) {\r\n            return !XP.isString(value) || !XP.isFinite(min) ? false : (value.length < min ? new XP.ValidationError(name || 'data', 'a minimum of ' + min + ' chars', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is not array (based on bool)\r\n         *\r\n         * @param {*} value\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        multi: {input: 'checkbox', method: function (value, bool, name) {\r\n            return XP.xor(bool, XP.isArray(value)) ? new XP.ValidationError(name || 'data', 'multi', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is not multiple of val\r\n         *\r\n         * @param {number} value\r\n         * @param {number} val\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        multipleOf: {input: 'number', type: 'number', method: function (value, val, name) {\r\n            return !XP.isFinite(value) || !XP.isFinite(val) ? false : (value % val !== 0 ? new XP.ValidationError(name || 'data', 'divisible by ' + val, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value matches pattern\r\n         *\r\n         * @param {string} value\r\n         * @param {string} pattern\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        pattern: {input: 'text', options: XP.keys(exp.patterns), type: 'string', method: function (value, pattern, name) {\r\n            var reg = XP.isString(value) && XP.isString(pattern, true) && (exp.patterns[pattern] || pattern);\r\n            if (XP.isString(reg) && XP.isRegExp(reg = XP.toRegExp(pattern))) { exp.patterns[pattern] = reg; }\r\n            return !reg ? false : (!reg.test(value) ? new XP.InvalidError(name || 'data', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is empty (based on bool)\r\n         *\r\n         * @param {*} value\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        required: {input: 'checkbox', method: function (value, bool, name) {\r\n            return bool && XP.isEmpty(value) ? new XP.RequiredError(name || 'data', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value type is not correct\r\n         *\r\n         * @param {*} value\r\n         * @param {string} type\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        type: {attributes: {required: true}, options: XP.keys(exp.types), method: function (value, type, name) {\r\n            return XP.has(exp.types, type || 'any') && !exp.types[type || 'any'](value) && !XP.isNull(value) ? new XP.ValidationError(name || 'data', type || 'any', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value includes duplicates (based on bool)\r\n         *\r\n         * @param {Array} value\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        uniqueItems: {input: 'checkbox', multi: true, method: function (value, bool, name) {\r\n            return !XP.isArray(value) ? false : (bool && !XP.isUniq(value) ? new XP.ValidationError(name || 'data', 'should not have duplicates', 400) : null);\r\n        }}\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));"]}