{"version":3,"sources":["../browserify/node_modules/browser-pack/_prelude.js","index","lib/index.js","lib/sanitize.js","lib/validate.js"],"names":["global","XP","require","XPEmitter","sanitize","validate","filterer","item","has","mapper","handle","assign","withdraw","types","freeze","keys","sanitizers","filter","map","validators","module","exports","XPSchema","Class","extends","initialize","options","self","this","call","fields","loose","useful","promise","value","data","resolver","waterfall","next","isObject","ValidationError","val","set","static","get","window","exp","name","forOwn","key","field","sanitizeStep","isVoid","step","isDefined","isString","type","sanitizeValue","multi","index","method","sub","bool","validateStep","error","validateValue","strict","err","patterns","camelCase","camelCaseRegex","capitalize","capitalizeRegex","kebabCase","kebabCaseRegex","keyCase","keyCaseRegex","lowerCase","lowerCaseRegex","snakeCase","snakeCaseRegex","startCase","startCaseRegex","trim","trimRegex","upperCase","upperCaseRegex","uuid","uuidRegex","any","isAny","boolean","isBoolean","input","isInput","number","isFinite","object","recursive","string","exclusiveMaximum","max","exclusiveMinimum","min","xor","maximum","maxItems","attributes","isArray","length","maxLength","minimum","minItems","minLength","multipleOf","pattern","reg","isRegExp","toRegExp","test","InvalidError","required","isEmpty","RequiredError","isNull","uniqueItems","isUniq"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports=require(\"./lib\");","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var XP         = global.XP || require('expandjs'),\r\n        XPEmitter  = global.XPEmitter || require('xp-emitter'),\r\n\r\n        sanitize   = require('./sanitize'),\r\n        validate   = require('./validate'),\r\n\r\n        filterer   = function (item) { return XP.has(item, 'input') || XP.has(item, 'options'); },\r\n        mapper     = function (item, handle) { item = XP.assign({handle: handle}, item); XP.withdraw(item, 'method'); return item; },\r\n\r\n        types      = XP.freeze(XP.keys(validate.types)),\r\n        sanitizers = XP.freeze(XP.filter(XP.map(sanitize.sanitizers, mapper), filterer)),\r\n        validators = XP.freeze(XP.filter(XP.map(validate.validators, mapper), filterer));\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * This class is used to provide sanitization and validation functionalities.\r\n     *\r\n     * @class XPSchema\r\n     * @description This class is used to provide sanitization and validation functionalities\r\n     * @extends XPEmitter\r\n     */\r\n    module.exports = global.XPSchema = new XP.Class('XPSchema', {\r\n\r\n        // EXTENDS\r\n        extends: XPEmitter,\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * @constructs\r\n         * @param {Object} options\r\n         *   @param {Object} [options.fields]\r\n         *   @param {boolean} [options.loose = false]\r\n         *   @param {boolean} [options.useful = false]\r\n         */\r\n        initialize: function (options) {\r\n\r\n            // Vars\r\n            var self = this;\r\n\r\n            // Super\r\n            XPEmitter.call(self);\r\n\r\n            // Setting\r\n            self.options = options;\r\n            self.fields  = self.options.fields || {};\r\n            self.loose   = self.options.loose || false;\r\n            self.useful  = self.options.useful || false;\r\n        },\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * Sanitizes the data.\r\n         *\r\n         * @method sanitize\r\n         * @param {Object} data\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        sanitize: {\r\n            promise: true,\r\n            value: function (data, resolver) {\r\n                var self = this;\r\n                XP.waterfall([\r\n                    function (next) { next((!XP.isObject(data) && new XP.ValidationError('data', 'Object', 400)) || null); }, // asserting\r\n                    function (next) { next(null, sanitize(data, self.fields, self.options)); } // sanitizing\r\n                ], resolver);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validates the data.\r\n         *\r\n         * @method validate\r\n         * @param {Object} data\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        validate: {\r\n            promise: true,\r\n            value: function (data, resolver) {\r\n                var self = this;\r\n                XP.waterfall([\r\n                    function (next) { next((!XP.isObject(data) && new XP.ValidationError('data', 'Object', 400)) || null); }, // asserting\r\n                    function (next) { next(validate(data, self.fields, self.options)); }, // validating\r\n                    function (next) { next(null, data); }\r\n                ], resolver);\r\n            }\r\n        },\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property fields\r\n         * @type Object\r\n         */\r\n        fields: {\r\n            validate: function (val) { return !XP.isObject(val) && 'Object'; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property loose\r\n         * @type boolean\r\n         */\r\n        loose: {\r\n            set: function (val) { return !!val; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property sanitizers\r\n         * @type Object\r\n         * @readonly\r\n         * @static\r\n         */\r\n        sanitizers: {\r\n            'static': true,\r\n            get: function () { return sanitizers; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property types\r\n         * @type Array\r\n         * @readonly\r\n         * @static\r\n         */\r\n        types: {\r\n            'static': true,\r\n            get: function () { return types; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property useful\r\n         * @type boolean\r\n         */\r\n        useful: {\r\n            set: function (val) { return !!val; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property validators\r\n         * @type Object\r\n         * @readonly\r\n         * @static\r\n         */\r\n        validators: {\r\n            'static': true,\r\n            get: function () { return validators; }\r\n        }\r\n    });\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var exp = module.exports,\r\n        XP  = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Sanitize the data\r\n     *\r\n     * @param {Object} data\r\n     * @param {Object} fields\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {Object}\r\n     */\r\n    exp = module.exports = function (data, fields, options, name) {\r\n\r\n        // Restricting\r\n        XP.forOwn(data, function (val, key) {\r\n            if (!options.loose && !fields[key]) { delete data[key]; }\r\n        });\r\n\r\n        // Sanitizing\r\n        XP.forOwn(fields, function (field, key) {\r\n            data[key] = exp.sanitizeStep(data[key], field, fields, options, (name ? name + '.' : '') + key);\r\n            if (options.useful && XP.isVoid(data[key])) { delete data[key]; }\r\n        });\r\n\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * Sanitizes the step\r\n     *\r\n     * @param {*} step\r\n     * @param {Object} [field]\r\n     * @param {Object} [fields]\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.sanitizeStep = function (step, field, fields, options, name) {\r\n\r\n        // Setting\r\n        step = XP.isDefined(step) ? step : null;\r\n\r\n        // Checking\r\n        if (XP.isString(field, true)) { field = {type: field}; } else if (!XP.isObject(field)) { return step; }\r\n\r\n        // Sanitizing (step)\r\n        step = exp.sanitizeValue(step, field, null, name);\r\n\r\n        // Sanitizing (values)\r\n        if (field.map || field.multi) {\r\n            XP[field.map ? 'forOwn' : 'forEach'](step, function (value, index) {\r\n                step[index] = exp.sanitizeValue(value, field, index, name + '[' + index + ']');\r\n                if (XP.isObject(step[index]) && (field.fields || field.type === 'recursive')) {\r\n                    step[index] = exp(step[index], field.fields || fields, XP.assign({}, options, {loose: field.loose}), name + '[' + index + ']');\r\n                }\r\n            });\r\n        } else if (XP.isObject(step) && (field.fields || field.type === 'recursive')) {\r\n            step = exp(step, field.fields || fields, XP.assign({}, options, {loose: field.loose}), name);\r\n        }\r\n\r\n        return step;\r\n    };\r\n\r\n    /**\r\n     * Sanitizes the value\r\n     *\r\n     * @param {*} value\r\n     * @param {Object} [field]\r\n     * @param {number | string} [index]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.sanitizeValue = function (value, field, index, name) {\r\n\r\n        // Setting\r\n        value = XP.isDefined(value) ? value : null;\r\n\r\n        // Vars\r\n        var key = (XP.isVoid(index) && ((field.map && 'map') || (field.multi && 'multi'))) || 'type',\r\n            val = exp.sanitizers[key].method(value, field[key], name);\r\n\r\n        // Sanitizing\r\n        XP.forOwn(field, function (sub, key) {\r\n            if (!exp.sanitizers[key] || key === 'map' || key === 'multi' || key === 'type') { return; }\r\n            val = exp.sanitizers[key].method(val, sub, name);\r\n        });\r\n\r\n        return val;\r\n    };\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * The available sanitizers.\r\n     *\r\n     * @property sanitizers\r\n     * @type Object\r\n     */\r\n    exp.sanitizers = {\r\n\r\n        /**\r\n         * Returns map representation of value (based on bool)\r\n         *\r\n         * @param {*} value\r\n         * @param {boolean} bool\r\n         * @returns {*}\r\n         */\r\n        map: {method: function (value, bool) {\r\n            return XP.isVoid(value) && bool ? {} : value;\r\n        }},\r\n\r\n        /**\r\n         * Returns array representation of value (based on bool)\r\n         *\r\n         * @param {*} value\r\n         * @param {boolean} bool\r\n         * @returns {*}\r\n         */\r\n        multi: {method: function (value, bool) {\r\n            return XP.isVoid(value) && bool ? [] : value;\r\n        }},\r\n\r\n        /**\r\n         * Returns typed representation of value\r\n         *\r\n         * @param {*} value\r\n         * @param {string} type\r\n         * @returns {*}\r\n         */\r\n        type: {method: function (value, type) {\r\n            return XP.isVoid(value) && type === 'boolean' ? false : value;\r\n        }}\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var exp = module.exports,\r\n        XP  = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Validates the data.\r\n     *\r\n     * @param {Object} data\r\n     * @param {Object} fields\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {Object}\r\n     */\r\n    exp = module.exports = function (data, fields, options, name) {\r\n\r\n        // Trying\r\n        try {\r\n\r\n            // Validating\r\n            XP.forOwn(fields, function (field, key) {\r\n                exp.validateStep(data[key], field, fields, options, (name ? name + '.' : '') + key);\r\n            });\r\n\r\n            return null;\r\n        }\r\n\r\n        // Catching\r\n        catch (error) { return error; }\r\n    };\r\n\r\n    /**\r\n     * Validates the step.\r\n     *\r\n     * @param {*} step\r\n     * @param {Object} [field]\r\n     * @param {Object} [fields]\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     */\r\n    exp.validateStep = function (step, field, fields, options, name) {\r\n\r\n        // Setting\r\n        step = XP.isDefined(step) ? step : null;\r\n\r\n        // Checking\r\n        if (XP.isString(field, true)) { field = {type: field}; } else if (!XP.isObject(field)) { return; }\r\n\r\n        // Validating (step)\r\n        exp.validateValue(step, field, null, name);\r\n\r\n        // Validating (values)\r\n        if (field.map || field.multi) {\r\n            XP[field.map ? 'forOwn' : 'forEach'](step, function (value, index) {\r\n                exp.validateValue(value, field, index, name + '[' + index + ']');\r\n                if (XP.isObject(value) && (field.fields || field.type === 'recursive')) {\r\n                    exp(value, field.fields || fields, XP.assign({}, options, {strict: field.strict}), name + '[' + index + ']');\r\n                }\r\n            });\r\n        } else if (XP.isObject(step) && (field.fields || field.type === 'recursive')) {\r\n            exp(step, field.fields || fields, XP.assign({}, options, {strict: field.strict}), name);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Validates the value.\r\n     *\r\n     * @param {*} value\r\n     * @param {Object} [field]\r\n     * @param {number | string} [index]\r\n     * @param {string} [name]\r\n     */\r\n    exp.validateValue = function (value, field, index, name) {\r\n\r\n        // Setting\r\n        value = XP.isDefined(value) ? value : null;\r\n\r\n        // Vars\r\n        var key = (XP.isVoid(index) && ((field.map && 'map') || (field.multi && 'multi'))) || 'type',\r\n            err = exp.validators[key].method(value, field[key], name);\r\n\r\n        // Throwing\r\n        if (err) { throw err; }\r\n\r\n        // Validating\r\n        XP.forOwn(field, function (sub, key) {\r\n            if (!exp.validators[key] || key === 'map' || key === 'multi' || key === 'type') { return; }\r\n            if (err = exp.validators[key].method(value, sub, name)) { throw err; }\r\n        });\r\n    };\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * The available patterns.\r\n     *\r\n     * @property patterns\r\n     * @type Object\r\n     */\r\n    exp.patterns = {\r\n        camelCase: XP.camelCaseRegex,\r\n        capitalize: XP.capitalizeRegex,\r\n        kebabCase: XP.kebabCaseRegex,\r\n        keyCase: XP.keyCaseRegex,\r\n        lowerCase: XP.lowerCaseRegex,\r\n        snakeCase: XP.snakeCaseRegex,\r\n        startCase: XP.startCaseRegex,\r\n        trim: XP.trimRegex,\r\n        upperCase: XP.upperCaseRegex,\r\n        uuid: XP.uuidRegex\r\n    };\r\n\r\n    /**\r\n     * The available types.\r\n     *\r\n     * @property types\r\n     * @type Object\r\n     */\r\n    exp.types = {\r\n        any: XP.isAny,\r\n        boolean: XP.isBoolean,\r\n        input: XP.isInput,\r\n        number: XP.isFinite,\r\n        object: XP.isObject,\r\n        recursive: XP.isObject,\r\n        string: XP.isString\r\n    };\r\n\r\n    /**\r\n     * The available validators.\r\n     *\r\n     * @property validators\r\n     * @type Object\r\n     */\r\n    exp.validators = {\r\n\r\n        /**\r\n         * Returns error if value is gte than max\r\n         *\r\n         * @param {number} value\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        exclusiveMaximum: {input: 'number', type: 'number', method: function (value, max, name) {\r\n            return !XP.isFinite(value) || !XP.isFinite(max) ? false : (value >= max ? new XP.ValidationError(name || 'data', 'less than ' + max, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is lte than min\r\n         *\r\n         * @param {number} value\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        exclusiveMinimum: {input: 'number', type: 'number', method: function (value, min, name) {\r\n            return !XP.isFinite(value) || !XP.isFinite(min) ? false : (value <= min ? new XP.ValidationError(name || 'data', 'greater than ' + min, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is not an map (based on bool)\r\n         *\r\n         * @param {*} value\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        map: {input: 'checkbox', multi: true, method: function (value, bool, name) {\r\n            return XP.xor(bool, XP.isObject(value)) ? new XP.ValidationError(name || 'data', 'a map', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is gt than max\r\n         *\r\n         * @param {number} value\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maximum: {input: 'number', type: 'number', method: function (value, max, name) {\r\n            return !XP.isFinite(value) || !XP.isFinite(max) ? false : (value > max ? new XP.ValidationError(name || 'data', 'a maximum of ' + max, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value length is gt than max\r\n         *\r\n         * @param {Array} value\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maxItems: {attributes: {min: 1}, input: 'number', multi: true, method: function (value, max, name) {\r\n            return !XP.isArray(value) || !XP.isFinite(max) || max < 1 ? false : (value.length > max ? new XP.ValidationError(name || 'data', 'a maximum of ' + max + ' items', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value length is gt than max\r\n         *\r\n         * @param {string} value\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maxLength: {attributes: {min: 1}, input: 'number', type: 'string', method: function (value, max, name) {\r\n            return !XP.isString(value) || !XP.isFinite(max) || max < 1 ? false : (value.length > max ? new XP.ValidationError(name || 'data', 'a maximum of ' + max + ' chars', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is lt than min\r\n         *\r\n         * @param {number} value\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        minimum: {input: 'number', type: 'number', method: function (value, min, name) {\r\n            return !XP.isFinite(value) || !XP.isFinite(min) ? false : (value < min ? new XP.ValidationError(name || 'data', 'a minimum of ' + min, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value length is lt than min\r\n         *\r\n         * @param {Array} value\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        minItems: {attributes: {min: 1}, input: 'number', multi: true, method: function (value, min, name) {\r\n            return !XP.isArray(value) || !XP.isFinite(min) ? false : (value.length < min ? new XP.ValidationError(name || 'data', 'a minimum of ' + min + ' items', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value length is lt than min\r\n         *\r\n         * @param {string} value\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        minLength: {attributes: {min: 1}, input: 'number', type: 'string', method: function (value, min, name) {\r\n            return !XP.isString(value) || !XP.isFinite(min) ? false : (value.length < min ? new XP.ValidationError(name || 'data', 'a minimum of ' + min + ' chars', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is not array (based on bool)\r\n         *\r\n         * @param {*} value\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        multi: {input: 'checkbox', method: function (value, bool, name) {\r\n            return XP.xor(bool, XP.isArray(value)) ? new XP.ValidationError(name || 'data', 'multi', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is not multiple of val\r\n         *\r\n         * @param {number} value\r\n         * @param {number} val\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        multipleOf: {input: 'number', type: 'number', method: function (value, val, name) {\r\n            return !XP.isFinite(value) || !XP.isFinite(val) ? false : (value % val !== 0 ? new XP.ValidationError(name || 'data', 'divisible by ' + val, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value matches pattern\r\n         *\r\n         * @param {string} value\r\n         * @param {string} pattern\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        pattern: {input: 'text', options: XP.keys(exp.patterns), type: 'string', method: function (value, pattern, name) {\r\n            var reg = XP.isString(value) && XP.isString(pattern, true) && (exp.patterns[pattern] || pattern);\r\n            if (XP.isString(reg) && XP.isRegExp(reg = XP.toRegExp(pattern))) { exp.patterns[pattern] = reg; }\r\n            return !reg ? false : (!reg.test(value) ? new XP.InvalidError(name || 'data', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value is empty (based on bool)\r\n         *\r\n         * @param {*} value\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        required: {input: 'checkbox', method: function (value, bool, name) {\r\n            return bool && XP.isEmpty(value) ? new XP.RequiredError(name || 'data', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value type is not correct\r\n         *\r\n         * @param {*} value\r\n         * @param {string} type\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        type: {attributes: {required: true}, options: XP.keys(exp.types), method: function (value, type, name) {\r\n            return XP.has(exp.types, type || 'any') && !exp.types[type || 'any'](value) && !XP.isNull(value) ? new XP.ValidationError(name || 'data', type || 'any', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if value includes duplicates (based on bool)\r\n         *\r\n         * @param {Array} value\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        uniqueItems: {input: 'checkbox', multi: true, method: function (value, bool, name) {\r\n            return !XP.isArray(value) ? false : (bool && !XP.isUniq(value) ? new XP.ValidationError(name || 'data', 'should not have duplicates', 400) : null);\r\n        }}\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));"]}