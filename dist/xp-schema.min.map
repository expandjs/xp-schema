{"version":3,"sources":["../browserify/node_modules/browser-pack/_prelude.js","index","lib/index.js","lib/filter.js","lib/sanitize.js","lib/validate.js"],"names":["global","XP","require","XPEmitter","filter","sanitize","validate","filterer","item","has","mapper","handle","assign","withdraw","types","freeze","keys","sanitizers","map","validators","module","exports","XPSchema","Class","extends","initialize","options","self","this","call","fields","loose","useful","promise","value","data","resolver","waterfall","next","isObject","ValidationError","attempt","val","set","static","get","window","target","forOwn","key","immutable","exp","name","field","sanitizeStep","isVoid","step","isDefined","sanitizeValue","multi","index","type","method","sub","bool","validateStep","validateValue","strict","err","patterns","camelCase","camelCaseRegex","capitalize","capitalizeRegex","kebabCase","kebabCaseRegex","keyCase","keyCaseRegex","lowerCase","lowerCaseRegex","snakeCase","snakeCaseRegex","startCase","startCaseRegex","trim","trimRegex","upperCase","upperCaseRegex","uuid","uuidRegex","any","isAny","boolean","isBoolean","input","isInput","number","isFinite","object","recursive","string","isString","exclusiveMaximum","max","exclusiveMinimum","min","xor","maximum","maxItems","attributes","isArray","length","maxLength","minimum","minItems","minLength","multipleOf","pattern","reg","isRegExp","toRegExp","test","InvalidError","required","isEmpty","RequiredError","isNull","uniqueItems","isUniq"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports=require(\"./lib\");","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var XP         = global.XP || require('expandjs'),\r\n        XPEmitter  = global.XPEmitter || require('xp-emitter'),\r\n\r\n        filter     = require('./filter'),\r\n        sanitize   = require('./sanitize'),\r\n        validate   = require('./validate'),\r\n\r\n        filterer   = function (item) { return XP.has(item, 'input') || XP.has(item, 'options'); },\r\n        mapper     = function (item, handle) { item = XP.assign({handle: handle}, item); XP.withdraw(item, 'method'); return item; },\r\n\r\n        types      = XP.freeze(XP.keys(validate.types)),\r\n        sanitizers = XP.freeze(XP.filter(XP.map(sanitize.sanitizers, mapper), filterer)),\r\n        validators = XP.freeze(XP.filter(XP.map(validate.validators, mapper), filterer));\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * This class is used to provide scheming functionalities, including sanitization and validation.\r\n     *\r\n     * @class XPSchema\r\n     * @description This class is used to provide scheming functionalities, including sanitization and validation\r\n     * @extends XPEmitter\r\n     */\r\n    module.exports = global.XPSchema = new XP.Class('XPSchema', {\r\n\r\n        // EXTENDS\r\n        extends: XPEmitter,\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * @constructs\r\n         * @param {Object} options\r\n         *   @param {Object} [options.fields]\r\n         *   @param {boolean} [options.loose = false]\r\n         *   @param {boolean} [options.useful = false]\r\n         */\r\n        initialize: function (options) {\r\n\r\n            // Vars\r\n            var self = this;\r\n\r\n            // Super\r\n            XPEmitter.call(self);\r\n\r\n            // Setting\r\n            self.options = options;\r\n            self.fields  = self.options.fields || {};\r\n            self.loose   = self.options.loose || false;\r\n            self.useful  = self.options.useful || false;\r\n        },\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * Filters the target.\r\n         *\r\n         * @method filter\r\n         * @param {Object} data\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        filter: {\r\n            promise: true,\r\n            value: function (data, resolver) {\r\n                var self = this;\r\n                XP.waterfall([\r\n                    function (next) { next((!XP.isObject(data) && new XP.ValidationError('data', 'Object', 400)) || null); },\r\n                    function (next) { XP.attempt(function (next) { next(null, filter(data, self.fields, self.options)); }, next); }\r\n                ], resolver);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sanitizes the target.\r\n         *\r\n         * @method sanitize\r\n         * @param {Object} data\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        sanitize: {\r\n            promise: true,\r\n            value: function (data, resolver) {\r\n                var self = this;\r\n                XP.waterfall([\r\n                    function (next) { next((!XP.isObject(data) && new XP.ValidationError('data', 'Object', 400)) || null); },\r\n                    function (next) { XP.attempt(function (next) { next(null, sanitize(data, self.fields, self.options)); }, next); }\r\n                ], resolver);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validates the target.\r\n         *\r\n         * @method validate\r\n         * @param {Object} data\r\n         * @param {Function} [resolver]\r\n         * @returns {Promise}\r\n         */\r\n        validate: {\r\n            promise: true,\r\n            value: function (data, resolver) {\r\n                var self = this;\r\n                XP.waterfall([\r\n                    function (next) { next((!XP.isObject(data) && new XP.ValidationError('data', 'Object', 400)) || null); },\r\n                    function (next) { XP.attempt(function (next) { next(null, validate(data, self.fields, self.options)); }, next); }\r\n                ], resolver);\r\n            }\r\n        },\r\n\r\n        /*********************************************************************/\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property fields\r\n         * @type Object\r\n         */\r\n        fields: {\r\n            validate: function (val) { return !XP.isObject(val) && 'Object'; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property loose\r\n         * @type boolean\r\n         */\r\n        loose: {\r\n            set: function (val) { return !!val; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property sanitizers\r\n         * @type Object\r\n         * @readonly\r\n         * @static\r\n         */\r\n        sanitizers: {\r\n            'static': true,\r\n            get: function () { return sanitizers; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property types\r\n         * @type Array\r\n         * @readonly\r\n         * @static\r\n         */\r\n        types: {\r\n            'static': true,\r\n            get: function () { return types; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property useful\r\n         * @type boolean\r\n         */\r\n        useful: {\r\n            set: function (val) { return !!val; }\r\n        },\r\n\r\n        /**\r\n         * TODO DOC\r\n         *\r\n         * @property validators\r\n         * @type Object\r\n         * @readonly\r\n         * @static\r\n         */\r\n        validators: {\r\n            'static': true,\r\n            get: function () { return validators; }\r\n        }\r\n    });\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var XP = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Filters the target\r\n     *\r\n     * @param {Object} target\r\n     * @param {Object} fields\r\n     * @returns {Object}\r\n     */\r\n    module.exports = function (target, fields) {\r\n\r\n        // Filtering\r\n        XP.forOwn(target, function (val, key) {\r\n            if (XP.has(fields, key) && fields[key].immutable) { delete target[key]; }\r\n        });\r\n\r\n        return target;\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var exp = module.exports,\r\n        XP  = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Sanitize the target\r\n     *\r\n     * @param {Object} target\r\n     * @param {Object} fields\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {Object}\r\n     */\r\n    exp = module.exports = function (target, fields, options, name) {\r\n\r\n        // Restricting\r\n        XP.forOwn(target, function (val, key) {\r\n            if (!options.loose && !fields[key]) { delete target[key]; }\r\n        });\r\n\r\n        // Sanitizing\r\n        XP.forOwn(fields, function (field, key) {\r\n            target[key] = exp.sanitizeStep(target[key], field, fields, options, (name ? name + '.' : '') + key);\r\n            if (options.useful && XP.isVoid(target[key])) { delete target[key]; }\r\n        });\r\n\r\n        return target;\r\n    };\r\n\r\n    /**\r\n     * Sanitizes the step\r\n     *\r\n     * @param {*} step\r\n     * @param {Object} [field]\r\n     * @param {Object} [fields]\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.sanitizeStep = function (step, field, fields, options, name) {\r\n\r\n        // Setting\r\n        step = XP.isDefined(step) ? step : null;\r\n\r\n        // Checking\r\n        if (!XP.isObject(field)) { return step; }\r\n\r\n        // Sanitizing (step)\r\n        step = exp.sanitizeValue(step, field, null, name);\r\n\r\n        // Sanitizing (values)\r\n        if (field.map || field.multi) {\r\n            XP[field.map ? 'forOwn' : 'forEach'](step, function (value, index) {\r\n                step[index] = exp.sanitizeValue(value, field, index, name + '[' + index + ']');\r\n                if (XP.isObject(step[index]) && (field.fields || field.type === 'recursive')) {\r\n                    step[index] = exp(step[index], field.fields || fields, XP.assign({}, options, {loose: field.loose}), name + '[' + index + ']');\r\n                }\r\n            });\r\n        } else if (XP.isObject(step) && (field.fields || field.type === 'recursive')) {\r\n            step = exp(step, field.fields || fields, XP.assign({}, options, {loose: field.loose}), name);\r\n        }\r\n\r\n        return step;\r\n    };\r\n\r\n    /**\r\n     * Sanitizes the value\r\n     *\r\n     * @param {*} value\r\n     * @param {Object} [field]\r\n     * @param {number | string} [index]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.sanitizeValue = function (value, field, index, name) {\r\n\r\n        // Setting\r\n        value = XP.isDefined(value) ? value : null;\r\n\r\n        // Vars\r\n        var key = (XP.isVoid(index) && ((field.map && 'map') || (field.multi && 'multi'))) || 'type',\r\n            val = exp.sanitizers[key].method(value, field[key], name);\r\n\r\n        // Sanitizing\r\n        XP.forOwn(field, function (sub, key) {\r\n            if (!exp.sanitizers[key] || key === 'map' || key === 'multi' || key === 'type') { return; }\r\n            val = exp.sanitizers[key].method(val, sub, name);\r\n        });\r\n\r\n        return val;\r\n    };\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * The available sanitizers.\r\n     *\r\n     * @property sanitizers\r\n     * @type Object\r\n     */\r\n    exp.sanitizers = {\r\n\r\n        /**\r\n         * Returns map representation of target (based on bool)\r\n         *\r\n         * @param {*} target\r\n         * @param {boolean} bool\r\n         * @returns {*}\r\n         */\r\n        map: {method: function (target, bool) {\r\n            return XP.isVoid(target) && bool ? {} : target;\r\n        }},\r\n\r\n        /**\r\n         * Returns array representation of target (based on bool)\r\n         *\r\n         * @param {*} target\r\n         * @param {boolean} bool\r\n         * @returns {*}\r\n         */\r\n        multi: {method: function (target, bool) {\r\n            return XP.isVoid(target) && bool ? [] : target;\r\n        }},\r\n\r\n        /**\r\n         * Returns typed representation of target\r\n         *\r\n         * @param {*} target\r\n         * @param {string} type\r\n         * @returns {*}\r\n         */\r\n        type: {method: function (target, type) {\r\n            return XP.isVoid(target) && type === 'boolean' ? false : target;\r\n        }}\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));","/*jslint browser: true, devel: true, node: true, ass: true, nomen: true, unparam: true, indent: 4 */\r\n\r\n/**\r\n * @license\r\n * Copyright (c) 2015 The ExpandJS authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at https://expandjs.github.io/LICENSE.txt\r\n * The complete set of authors may be found at https://expandjs.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at https://expandjs.github.io/CONTRIBUTORS.txt\r\n */\r\n(function (global) {\r\n    \"use strict\";\r\n\r\n    // Vars\r\n    var exp = module.exports,\r\n        XP  = global.XP || require('expandjs');\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * Validates the target.\r\n     *\r\n     * @param {Object} target\r\n     * @param {Object} fields\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {Object}\r\n     */\r\n    exp = module.exports = function (target, fields, options, name) {\r\n\r\n        // Validating\r\n        XP.forOwn(fields, function (field, key) {\r\n            exp.validateStep(target[key], field, fields, options, (name ? name + '.' : '') + key);\r\n        });\r\n\r\n        return target;\r\n    };\r\n\r\n    /**\r\n     * Validates the step.\r\n     *\r\n     * @param {*} step\r\n     * @param {Object} [field]\r\n     * @param {Object} [fields]\r\n     * @param {Object} [options]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.validateStep = function (step, field, fields, options, name) {\r\n\r\n        // Setting\r\n        step = XP.isDefined(step) ? step : null;\r\n\r\n        // Checking\r\n        if (!XP.isObject(field)) { return step; }\r\n\r\n        // Validating (step)\r\n        exp.validateValue(step, field, null, name);\r\n\r\n        // Validating (values)\r\n        if (field.map || field.multi) {\r\n            XP[field.map ? 'forOwn' : 'forEach'](step, function (value, index) {\r\n                exp.validateValue(value, field, index, name + '[' + index + ']');\r\n                if (XP.isObject(value) && (field.fields || field.type === 'recursive')) {\r\n                    exp(value, field.fields || fields, XP.assign({}, options, {strict: field.strict}), name + '[' + index + ']');\r\n                }\r\n            });\r\n        } else if (XP.isObject(step) && (field.fields || field.type === 'recursive')) {\r\n            exp(step, field.fields || fields, XP.assign({}, options, {strict: field.strict}), name);\r\n        }\r\n\r\n        return step;\r\n    };\r\n\r\n    /**\r\n     * Validates the value.\r\n     *\r\n     * @param {*} value\r\n     * @param {Object} [field]\r\n     * @param {number | string} [index]\r\n     * @param {string} [name]\r\n     * @returns {*}\r\n     */\r\n    exp.validateValue = function (value, field, index, name) {\r\n\r\n        // Setting\r\n        value = XP.isDefined(value) ? value : null;\r\n\r\n        // Vars\r\n        var key = (XP.isVoid(index) && ((field.map && 'map') || (field.multi && 'multi'))) || 'type',\r\n            err = exp.validators[key].method(value, field[key], name);\r\n\r\n        // Throwing\r\n        if (err) { throw err; }\r\n\r\n        // Validating\r\n        XP.forOwn(field, function (sub, key) {\r\n            if (!exp.validators[key] || key === 'map' || key === 'multi' || key === 'type') { return; }\r\n            if (err = exp.validators[key].method(value, sub, name)) { throw err; }\r\n        });\r\n\r\n        return value;\r\n    };\r\n\r\n    /*********************************************************************/\r\n\r\n    /**\r\n     * The available patterns.\r\n     *\r\n     * @property patterns\r\n     * @type Object\r\n     */\r\n    exp.patterns = {\r\n        camelCase: XP.camelCaseRegex,\r\n        capitalize: XP.capitalizeRegex,\r\n        kebabCase: XP.kebabCaseRegex,\r\n        keyCase: XP.keyCaseRegex,\r\n        lowerCase: XP.lowerCaseRegex,\r\n        snakeCase: XP.snakeCaseRegex,\r\n        startCase: XP.startCaseRegex,\r\n        trim: XP.trimRegex,\r\n        upperCase: XP.upperCaseRegex,\r\n        uuid: XP.uuidRegex\r\n    };\r\n\r\n    /**\r\n     * The available types.\r\n     *\r\n     * @property types\r\n     * @type Object\r\n     */\r\n    exp.types = {\r\n        any: XP.isAny,\r\n        boolean: XP.isBoolean,\r\n        input: XP.isInput,\r\n        number: XP.isFinite,\r\n        object: XP.isObject,\r\n        recursive: XP.isObject,\r\n        string: XP.isString\r\n    };\r\n\r\n    /**\r\n     * The available validators.\r\n     *\r\n     * @property validators\r\n     * @type Object\r\n     */\r\n    exp.validators = {\r\n\r\n        /**\r\n         * Returns error if target is gte than max\r\n         *\r\n         * @param {number} target\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        exclusiveMaximum: {input: 'number', type: 'number', method: function (target, max, name) {\r\n            return !XP.isFinite(target) || !XP.isFinite(max) ? false : (target >= max ? new XP.ValidationError(name || 'target', 'less than ' + max, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is lte than min\r\n         *\r\n         * @param {number} target\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        exclusiveMinimum: {input: 'number', type: 'number', method: function (target, min, name) {\r\n            return !XP.isFinite(target) || !XP.isFinite(min) ? false : (target <= min ? new XP.ValidationError(name || 'target', 'greater than ' + min, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is not an map (based on bool)\r\n         *\r\n         * @param {*} target\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        map: {input: 'checkbox', multi: true, method: function (target, bool, name) {\r\n            return XP.xor(bool, XP.isObject(target)) ? new XP.ValidationError(name || 'target', 'a map', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is gt than max\r\n         *\r\n         * @param {number} target\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maximum: {input: 'number', type: 'number', method: function (target, max, name) {\r\n            return !XP.isFinite(target) || !XP.isFinite(max) ? false : (target > max ? new XP.ValidationError(name || 'target', 'a maximum of ' + max, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target length is gt than max\r\n         *\r\n         * @param {Array} target\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maxItems: {attributes: {min: 1}, input: 'number', multi: true, method: function (target, max, name) {\r\n            return !XP.isArray(target) || !XP.isFinite(max) || max < 1 ? false : (target.length > max ? new XP.ValidationError(name || 'target', 'a maximum of ' + max + ' items', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target length is gt than max\r\n         *\r\n         * @param {string} target\r\n         * @param {number} max\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        maxLength: {attributes: {min: 1}, input: 'number', type: 'string', method: function (target, max, name) {\r\n            return !XP.isString(target) || !XP.isFinite(max) || max < 1 ? false : (target.length > max ? new XP.ValidationError(name || 'target', 'a maximum of ' + max + ' chars', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is lt than min\r\n         *\r\n         * @param {number} target\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        minimum: {input: 'number', type: 'number', method: function (target, min, name) {\r\n            return !XP.isFinite(target) || !XP.isFinite(min) ? false : (target < min ? new XP.ValidationError(name || 'target', 'a minimum of ' + min, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target length is lt than min\r\n         *\r\n         * @param {Array} target\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        minItems: {attributes: {min: 1}, input: 'number', multi: true, method: function (target, min, name) {\r\n            return !XP.isArray(target) || !XP.isFinite(min) ? false : (target.length < min ? new XP.ValidationError(name || 'target', 'a minimum of ' + min + ' items', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target length is lt than min\r\n         *\r\n         * @param {string} target\r\n         * @param {number} min\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        minLength: {attributes: {min: 1}, input: 'number', type: 'string', method: function (target, min, name) {\r\n            return !XP.isString(target) || !XP.isFinite(min) ? false : (target.length < min ? new XP.ValidationError(name || 'target', 'a minimum of ' + min + ' chars', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is not array (based on bool)\r\n         *\r\n         * @param {*} target\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        multi: {input: 'checkbox', method: function (target, bool, name) {\r\n            return XP.xor(bool, XP.isArray(target)) ? new XP.ValidationError(name || 'target', 'multi', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is not multiple of val\r\n         *\r\n         * @param {number} target\r\n         * @param {number} val\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        multipleOf: {input: 'number', type: 'number', method: function (target, val, name) {\r\n            return !XP.isFinite(target) || !XP.isFinite(val) ? false : (target % val !== 0 ? new XP.ValidationError(name || 'target', 'divisible by ' + val, 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target matches pattern\r\n         *\r\n         * @param {string} target\r\n         * @param {string} pattern\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        pattern: {input: 'text', options: XP.keys(exp.patterns), type: 'string', method: function (target, pattern, name) {\r\n            var reg = XP.isString(target) && XP.isString(pattern, true) && (exp.patterns[pattern] || pattern);\r\n            if (XP.isString(reg) && XP.isRegExp(reg = XP.toRegExp(pattern))) { exp.patterns[pattern] = reg; }\r\n            return !reg ? false : (!reg.test(target) ? new XP.InvalidError(name || 'target', 400) : null);\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target is empty (based on bool)\r\n         *\r\n         * @param {*} target\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        required: {input: 'checkbox', method: function (target, bool, name) {\r\n            return bool && XP.isEmpty(target) ? new XP.RequiredError(name || 'target', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target type is not correct\r\n         *\r\n         * @param {*} target\r\n         * @param {string} type\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error|null}\r\n         */\r\n        type: {attributes: {required: true}, options: XP.keys(exp.types), method: function (target, type, name) {\r\n            return XP.has(exp.types, type || 'any') && !exp.types[type || 'any'](target) && !XP.isNull(target) ? new XP.ValidationError(name || 'target', type || 'any', 400) : null;\r\n        }},\r\n\r\n        /**\r\n         * Returns error if target includes duplicates (based on bool)\r\n         *\r\n         * @param {Array} target\r\n         * @param {boolean} bool\r\n         * @param {string} [name]\r\n         * @returns {boolean | Error | null}\r\n         */\r\n        uniqueItems: {input: 'checkbox', multi: true, method: function (target, bool, name) {\r\n            return !XP.isArray(target) ? false : (bool && !XP.isUniq(target) ? new XP.ValidationError(name || 'target', 'should not have duplicates', 400) : null);\r\n        }}\r\n    };\r\n\r\n}(typeof window !== \"undefined\" ? window : global));"]}